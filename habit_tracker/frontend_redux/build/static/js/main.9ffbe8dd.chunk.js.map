{"version":3,"sources":["features/calenderDetail/CalenderDetail.module.scss","features/monthlyCalenderInfo/Days.module.scss","features/monthlyCalenderInfo/Calender.module.scss","features/monthlyCalenderInfo/NewCalenderInput.module.scss","features/months/Months.module.css","features/monthlyCalenderInfo/MonthlyCalenderInfo.module.scss","schemas.js","features/monthlyCalenderInfo/monthlyCalenderInfoSlice.js","features/calender/calenderSlice.js","features/day/daySlice.js","mapping.js","features/monthlyCalenderInfo/Days.js","features/monthlyCalenderInfo/Calenders.js","features/monthlyCalenderInfo/NewCalenderInput.js","features/months/Months.js","features/monthlyCalenderInfo/MonthlyCalenderInfo.js","features/calenderDetail/CalenderDetail.js","App.js","app/store.js","index.js"],"names":["module","exports","day","schema","Entity","calender","days","monthlyCalenderInfo","calenders","fetchCalenderByMonth","createAsyncThunk","month","thunkAPI","a","fetch","response","json","data","normalized","normalize","entities","calenderInfoAdapter","createEntityAdapter","initialState","getInitialState","monthlyCalenderInfoSlice","createSlice","name","reducers","extraReducers","fulfilled","state","action","upsertMany","payload","getSelectors","selectCalenderInfoById","selectById","reducer","selectIds","selectEntities","selectAll","selectTotal","calenderAdapter","addNewCalender","thunkApi","requestOptions","method","deleteCalender","id","calenderSlice","selectCalenderById","selectCalenderEntities","dayAdapter","updateDayStatus","status","updateDayNote","note","daySlice","selectDayEntities","statusToStyle","Days","days_ids","dayEntities","useSelector","map","className","styles","container","squareColorStyle","Card","key","classnames","square","CardBody","single_day","Calenders","calender_ids","monthlyCalenderInfoId","calenderEntities","dispatch","useDispatch","header","to","month_name","Button","outline","onClick","then","handleDelete","color","trash_icon","width","height","viewBox","fill","xmlns","d","fillRule","NewCalenderInput","useState","setName","empty","InputGroup","Input","onChange","e","target","value","handleChange","InputGroupAddon","addonType","months","Months","MonthlyCalenderInfo","useParams","useEffect","values","getNextStatus","index","indexOf","length","CalenderDetail","day_ids","history","useHistory","back_button","goBack","placeholder","one_day","day_header","day_of_week","type","Types","TEXT","onSave","text","handleSave","saveButtonLabel","hideSaveButton","hideCancelButton","onHoverCssClass","cancelButtonLabel","toggle_button","handleToggle","App","path","persistedStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","configureStore","preloadedState","subscribe","throttle","stringify","setItem","console","log","saveState","getState","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ffbe8dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green\":\"CalenderDetail_green__2avXY\",\"red\":\"CalenderDetail_red__3s5Kx\",\"header\":\"CalenderDetail_header___D6X1\",\"month\":\"CalenderDetail_month__3HpJF\",\"back_button\":\"CalenderDetail_back_button__3F38y\",\"container\":\"CalenderDetail_container__2ohuX\",\"square\":\"CalenderDetail_square__w9dfb\",\"one_day\":\"CalenderDetail_one_day__3e8di\",\"day\":\"CalenderDetail_day__3haAT\",\"day_header\":\"CalenderDetail_day_header__3l-zu\",\"toggle_button\":\"CalenderDetail_toggle_button__1PNZe\",\"placeholder\":\"CalenderDetail_placeholder__yPd0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green\":\"Days_green__2DpC8\",\"red\":\"Days_red__1S_Dm\",\"container\":\"Days_container__3Fmvo\",\"single_day\":\"Days_single_day__2ACY8\",\"square\":\"Days_square__1D1_I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"month_name\":\"Calender_month_name__1PNmV\",\"header\":\"Calender_header__2TzAh\",\"trash_icon\":\"Calender_trash_icon__1KKm1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewCalenderInput_container__2_mpu\",\"empty\":\"NewCalenderInput_empty__QrErC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Months_container__12HYt\",\"month\":\"Months_month__20f7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MonthlyCalenderInfo_header__1zfv3\"};","import { schema } from \"normalizr\";\nexport const day = new schema.Entity(\"day\");\nexport const calender = new schema.Entity(\"calender\", {\n  days: [day]\n});\nexport const monthlyCalenderInfo = new schema.Entity(\"monthlyCalenderInfo\", {\n  calenders: [calender]\n});","import {\r\n  createAsyncThunk,\r\n  createSlice,\r\n  createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { normalize } from \"normalizr\";\r\n\r\nimport {monthlyCalenderInfo} from \"../../schemas\";\r\n\r\nexport const fetchCalenderByMonth = createAsyncThunk(\r\n  \"calender/fetchByMonth\",\r\n  async (month, thunkAPI) => {\r\n    const response = await fetch(`/calender/monthv2/${month}`);\r\n    const data = await response.json();\r\n    const normalized = normalize(data, monthlyCalenderInfo);\r\n    return normalized.entities;\r\n  }\r\n  );\r\n  \r\nexport const calenderInfoAdapter = createEntityAdapter();\r\n\r\nconst initialState = calenderInfoAdapter.getInitialState();\r\n\r\nexport const monthlyCalenderInfoSlice = createSlice({\r\n  name: \"monthlyCalenderInfo\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchCalenderByMonth.fulfilled]: (state, action) => {\r\n      calenderInfoAdapter.upsertMany(state, action.payload.monthlyCalenderInfo);\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  selectById: selectCalenderInfoById,\r\n  selectIds: selectCalenderInfoIds,\r\n  selectEntities: selectCalenderInfoEntities,\r\n  selectAll: selectAllCalenderInfos,\r\n  selectTotal: selectTotalCalenderInfos } = calenderInfoAdapter.getSelectors(state => state.monthlyCalenderInfo);\r\n\r\nconst { reducer } = monthlyCalenderInfoSlice;\r\nexport default reducer;\r\n","import {\n    createSlice,\n    createEntityAdapter,\n    createAsyncThunk\n} from \"@reduxjs/toolkit\";\nimport {normalize} from \"normalizr\";\nimport {calender} from \"../../schemas\";\nimport {fetchCalenderByMonth, calenderInfoAdapter} from \"../monthlyCalenderInfo/monthlyCalenderInfoSlice\";\n\nexport const calenderAdapter = createEntityAdapter();\n\nconst initialState = calenderAdapter.getInitialState();\n\nexport const addNewCalender = createAsyncThunk(\n    \"calender/addNewCalender\",\n    async (name, thunkApi) => {\n        const requestOptions = {\n            method: \"POST\",\n        };\n        const response = await fetch(\n            `/calender?name=${name}&year=2020`,\n            requestOptions\n        );\n        return response;\n    }\n);\n\nexport const deleteCalender = createAsyncThunk(\n    \"calender/deleteCalender\",\n    async (id, thunkApi) => {\n        const requestOptions = {\n            method: \"DELETE\"\n        };\n        const response = await fetch(\n            `/calender/${id}`,\n            requestOptions\n        );\n        const data = await response.json();\n        return data;\n    }\n)\n\nexport const calenderSlice = createSlice({\n    name: \"calender\",\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [addNewCalender.fulfilled]: (state, action) => {\n  \n        },\n        [fetchCalenderByMonth.fulfilled]: (state, action) => {\n            calenderAdapter.upsertMany(state, action.payload.calender);\n        },\n        [deleteCalender.fulfilled]: (state, action) => {\n\n        }\n\n    },\n});\n\nexport const {\n    selectById: selectCalenderById,\n    selectIds: selectCalenderIds,\n    selectEntities: selectCalenderEntities,\n    selectAll: selectAllCalenders,\n    selectTotal: selectTotalCalenders \n} = calenderAdapter.getSelectors(state => state.calender);\n\nconst { reducer } = calenderSlice;\nexport default reducer;","import {\n    createSlice,\n    createEntityAdapter,\n    createAsyncThunk\n} from \"@reduxjs/toolkit\";\nimport {fetchCalenderByMonth} from \"../monthlyCalenderInfo/monthlyCalenderInfoSlice\";\nimport {addNewCalender} from \"../calender/calenderSlice\";\n\nexport const dayAdapter = createEntityAdapter();\n\nconst initialState = dayAdapter.getInitialState();\n\n export const updateDayStatus = createAsyncThunk(\n    \"day/updateDayStatus\",\n    async ({day, status}, thunkAPI) => {\n      const requestOptions = { method: \"POST\"};\n      const response = await fetch(\n          `/calender/day/${day}/status?status=${status}`,\n          requestOptions\n      );\n      await response.json();\n      return {day, status};\n    }\n);\nexport const updateDayNote = createAsyncThunk(\n    \"day/updateDayNote\",\n    async({id, note}, thunkAPI) => {\n        const response = await fetch(\n            `/calender/day/${id}/note?note=${note}`,\n            {method: \"POST\"}\n        );\n        await response.json();\n        return {id, note};\n    }\n)\n\nexport const daySlice = createSlice({\n    name: \"day\",\n    initialState,\n    reducers: {\n    },\n    extraReducers: {\n        [fetchCalenderByMonth.fulfilled]: (state, action) => {\n            dayAdapter.upsertMany(state, action.payload.day);\n        },\n        [addNewCalender.fulfilled]: (state, action) => {\n\n        },\n        [updateDayStatus.fulfilled]: (state, action) => {\n            let {day, status} = action.payload;\n            state.entities[day].status = status;\n        },\n        [updateDayNote.fulfilled]: (state, action) => {\n            let {id, note} = action.payload;\n            state.entities[id].note = note;\n        }\n    },\n});\n\nexport const {\n    selectById: selectDayById,\n    selectIds: selectDayIds,\n    selectEntities: selectDayEntities,\n    selectAll: selectAllDays,\n    selectTotal: selectTotalDays \n} = dayAdapter.getSelectors(state => state.day);\n\nconst { reducer } = daySlice;\nexport default reducer;","export const statusToStyle = {\n    \"Not Set\" : \"none\",\n    \"Complete\" : \"green\",\n    \"Incomplete\" : \"red\"\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {selectDayEntities} from \"../day/daySlice\";\nimport styles from './Days.module.scss';\nimport classnames from \"classnames\";\nimport {statusToStyle} from \"../../mapping\";\n\nimport {Card, CardBody} from 'reactstrap';\n\nexport function Days({days_ids}) {\n    let dayEntities = useSelector(selectDayEntities);\n\n    if(!days_ids){return null}\n\n    const days = days_ids.map(id => dayEntities[id]);\n\n    return (\n        <div className={styles.container}>\n            {days.map(day => {\n                let squareColorStyle = styles[statusToStyle[day.status]];\n                return (\n                <Card key={day.id} className={classnames(styles.square, squareColorStyle)} >\n                    <CardBody className={styles.single_day}>\n                        <div>{day.day}</div>\n                    </CardBody>\n                </Card>\n                )\n            })}\n        </div>\n    )\n}","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {selectCalenderEntities, deleteCalender} from \"../calender/calenderSlice\";\nimport {Days} from \"./Days\";\nimport {Link} from \"react-router-dom\";\nimport styles from \"./Calender.module.scss\";\nimport {Button} from \"reactstrap\";\nimport {fetchCalenderByMonth} from \"./monthlyCalenderInfoSlice\";\n\nexport function Calenders({calender_ids, monthlyCalenderInfoId}) {\n    \n    let calenderEntities = useSelector(selectCalenderEntities);\n\n    const calenders = calender_ids.map(id => calenderEntities[id]);\n\n    let dispatch = useDispatch();\n\n    function handleDelete(id){\n        \n        dispatch(deleteCalender(id)).then(\n            dispatch(fetchCalenderByMonth(monthlyCalenderInfoId))\n        )\n    }\n\n    return (\n        <div>\n            {calenders.map(calender => {\n                let id = calender.id;\n                \n                return(\n                <div key={id}>\n                    <div className={styles.header}>\n                        <Link to={`/calender_detail/${id}`}>\n                            <h5 className={styles.month_name}>{calender.name}</h5>\n                        </Link>\n                        <Button \n                            outline\n                            onClick={()=>handleDelete(id)}\n                            color=\"primary\" \n                            className={styles.trash_icon}>\n                            <svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                              <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                              <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n                            </svg>\n                        </Button>\n                    </div>\n                    <Days days_ids={calender.days}/>\n                </div>\n                )\n            })}\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {InputGroup, InputGroupAddon, Input, Button } from 'reactstrap';\nimport styles from \"./NewCalenderInput.module.scss\";\nimport {addNewCalender} from \"../calender/calenderSlice\";\nimport {fetchCalenderByMonth} from \"./monthlyCalenderInfoSlice\";\n\n\nexport function NewCalenderInput({monthlyCalenderInfoId}) {\n\n    const dispatch = useDispatch();\n    const [name, setName] = useState(\"\");\n\n    function handleChange(e){\n        setName(e.target.value);\n    }\n    \n    function handleSubmit(){\n        dispatch(addNewCalender(name)).then(\n            dispatch(fetchCalenderByMonth(monthlyCalenderInfoId))\n        )\n        setName(\"\");\n    }\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.empty}></div>\n            <InputGroup>\n                <Input onChange={(e) => handleChange(e)} />\n                <InputGroupAddon addonType=\"prepend\">\n                    <Button onClick={handleSubmit}>\n                        Add Calender\n                    </Button>\n                </InputGroupAddon>\n            </InputGroup>\n            <div className={styles.empty}></div>\n        </div>\n    )\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport styles from \"./Months.module.css\";\n\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n  \n\nexport function Months() {\n    return (\n        <div className={styles.container}>\n        {\n            months.map(month => (\n                <Link key={month}\n                      className={styles.month}\n                      to={`/monthly_calender_info/${month}`}>\n                    {month}\n                </Link>\n            ))\n        }\n        </div>\n    )\n}","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchCalenderByMonth,\r\n  selectCalenderInfoById\r\n} from \"./monthlyCalenderInfoSlice\";\r\n\r\nimport {Calenders} from \"./Calenders\";\r\nimport {NewCalenderInput} from \"./NewCalenderInput\";\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Months} from \"../months/Months\";\r\nimport styles from \"./MonthlyCalenderInfo.module.scss\";\r\n\r\nexport function MonthlyCalenderInfo() {\r\n  const dispatch = useDispatch();\r\n\r\n  //TODO:Move this into redux store now that redux store is persisted to localStorage\r\n  //const [currentMonth] = useStorageState(localStorage, \"state_month\", \"May\");\r\n\r\n  let {id} = useParams();\r\n\r\n  const monthlyCalenderInfo = useSelector(state =>\r\n    selectCalenderInfoById(state, id)\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCalenderByMonth(id));\r\n  }, [id, dispatch]);\r\n\r\n\r\n  if (!monthlyCalenderInfo) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div className={styles.header}>\r\n          <h1 className=\"month-name\">\r\n            {monthlyCalenderInfo.id}\r\n          </h1>\r\n          <Months monthlyCalenderInfoId={monthlyCalenderInfo.id}/>\r\n        </div>\r\n      </div>\r\n      <Calenders calender_ids={monthlyCalenderInfo.calenders} monthlyCalenderInfoId={monthlyCalenderInfo.id}/>\r\n      <NewCalenderInput monthlyCalenderInfoId={monthlyCalenderInfo.id}/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","import React from \"react\";\nimport {useParams, useHistory} from \"react-router-dom\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {selectCalenderById} from \"../calender/calenderSlice\";\nimport {selectDayEntities, updateDayStatus, updateDayNote} from \"../day/daySlice\";\nimport styles from \"./CalenderDetail.module.scss\";\nimport {statusToStyle} from \"../../mapping\";\nimport classnames from \"classnames\";\nimport EasyEdit, {Types} from 'react-easy-edit';\nimport {Button, Card, CardBody} from 'reactstrap';\n\nconst values = ['Not Set', 'Incomplete', 'Complete'];\n\nfunction getNextStatus(status) {\n    let index = values.indexOf(status);\n    index++;\n    if(index > values.length-1){ index = 0; }\n    return values[index];\n }\n\nexport function CalenderDetail() {\n    let {id} = useParams();\n    let dispatch = useDispatch();\n\n    let calender = useSelector(state => selectCalenderById(state, id));\n    let day_ids = calender.days;\n    let dayEntities = useSelector(selectDayEntities);\n    let days = day_ids.map(id => dayEntities[id]);\n    let history = useHistory();\n\n    function handleToggle(id){\n        let status = getNextStatus(dayEntities[id].status);\n        dispatch(updateDayStatus({day: id, status:getNextStatus(status)}));\n    }\n\n    function handleSave(id, note){\n        dispatch(updateDayNote({id, note}));\n    }\n    \n    return (\n        <div>\n            <header className={styles.header}>\n                <Button color=\"primary\" className={styles.back_button} onClick={() => history.goBack() }>\n                    <svg className=\"bi bi-arrow-left-circle-fill\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.646 2.646a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L6.207 7.5H11a.5.5 0 0 1 0 1H6.207l2.147 2.146z\"/>\n                    </svg>          \n                </Button>\n                <h1 className={styles.month}>{calender.name}</h1>\n                <div className={styles.placeholder}></div>\n            </header>\n            <div className={styles.container}>\n                {\n                    days.map(day => {\n                        let squareColorStyle = styles[statusToStyle[day.status]];\n                        return (\n                        <Card key={day.id} className={classnames(styles.square, squareColorStyle)}>\n                            <CardBody className={styles.one_day}>\n                                <div className={styles.day_header}>\n                                    <div className={styles.day}>{day.day}</div>\n                                    <div className={styles.day_of_week}>{day.day_of_week}</div>\n                                </div>\n                                <EasyEdit\n                                      type={Types.TEXT}\n                                      value={day.note}\n                                      placeholder=\"___________________\"\n                                      onSave={(text) => handleSave(day.id, text)}\n                                      saveButtonLabel=\"Save\"\n                                      hideSaveButton={true}\n                                      hideCancelButton={true}\n                                      onHoverCssClass=\"hover_class\"\n                                      cancelButtonLabel=\"Cancel\"\n                                />\n                                <Button outline color=\"primary\" className={styles.toggle_button} onClick={() => handleToggle(day.id)}>\n                                    <svg className=\"bi bi-arrow-clockwise\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <path fillRule=\"evenodd\" d=\"M3.17 6.706a5 5 0 0 1 7.103-3.16.5.5 0 1 0 .454-.892A6 6 0 1 0 13.455 5.5a.5.5 0 0 0-.91.417 5 5 0 1 1-9.375.789z\"/>\n                                      <path fillRule=\"evenodd\" d=\"M8.147.146a.5.5 0 0 1 .707 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 1 1-.707-.708L10.293 3 8.147.854a.5.5 0 0 1 0-.708z\"/>\n                                    </svg>\n                                </Button>\n                            </CardBody>\n                        </Card>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}","import React from \"react\";\r\nimport { MonthlyCalenderInfo } from \"./features/monthlyCalenderInfo/MonthlyCalenderInfo\";\r\nimport { CalenderDetail } from \"./features/calenderDetail/CalenderDetail\";\r\nimport \"./App.css\";\r\n\r\n\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport {Months} from \"./features/months/Months\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/calender_detail/:id\">\r\n          <CalenderDetail/>\r\n        </Route>\r\n        <Route path=\"/monthly_calender_info/:id\">\r\n          <MonthlyCalenderInfo />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Months/>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport monthlyCalenderInfo from '../features/monthlyCalenderInfo/monthlyCalenderInfoSlice';\r\nimport calenderSlice from '../features/calender/calenderSlice';\r\nimport daySlice from '../features/day/daySlice';\r\nimport throttle from 'lodash/throttle';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (!serializedState) return undefined;\r\n    else return JSON.parse(serializedState);\r\n  } catch(err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n\r\nconst persistedStore = loadState();\r\n\r\nlet store = configureStore({\r\n  reducer: {\r\n    monthlyCalenderInfo: monthlyCalenderInfo,\r\n    calender: calenderSlice,\r\n    day: daySlice\r\n  },\r\n  preloadedState: persistedStore,\r\n});\r\n\r\nstore.subscribe(throttle(() => {\r\n  saveState(store.getState());\r\n}, 1000));\r\n \r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nwindow.store = store;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}